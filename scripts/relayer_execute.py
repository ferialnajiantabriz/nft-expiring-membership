#
# import json
# from web3 import Web3
# from eth_account import Account
#
# # ------------------- RELAYER SETUP -------------------
# # This private key must have some Sepolia ETH to pay gas
# relayer_private_key = "b6de2b175f123a0fbd3c50e518eada57e66418a749a9b2df252e8be7a3b6a39e"
# relayer = Account.from_key(relayer_private_key)
# print(f"Relayer address: {relayer.address}")
#
# # Connect to Sepolia (Infura) - insert your real key
# INFURA_PROJECT_ID = "0dd19889e5b44ef28f8f1c0804a2a784"
# w3 = Web3(Web3.HTTPProvider(f"https://sepolia.infura.io/v3/{INFURA_PROJECT_ID}"))
#
# # ------------------- LOAD FORWARDER ABI -------------------
# with open("build/contracts/MinimalForwarder.json") as f:
#     forwarder_abi = json.load(f)["abi"]
#
# # Deployed MinimalForwarder address
# forwarder_address = "0x523A5FaF22E7696a53C7C1c1412770E859A685E6"
# forwarder = w3.eth.contract(address=forwarder_address, abi=forwarder_abi)
#
# # ------------------- LOAD SIGNED PAYLOAD -------------------
# # This file is generated by gasless_renew.py
# with open("signed_request.json") as f:
#     payload = json.load(f)
#
# req = payload["request"]
# signature = payload["signature"]
#
# # Convert numeric fields
# req_value = int(req["value"])    # 0.01 ETH in wei
# req_gas = int(req["gas"])        # e.g. 100000
# req_nonce = int(req["nonce"])    # e.g. 0
#
# # Convert data from "0x..." to bytes
# req_data_bytes = bytes.fromhex(req["data"][2:])
#
# # Build the function call
# transaction = forwarder.functions.execute(
#     (
#         req["from"],
#         req["to"],
#         req_value,
#         req_gas,
#         req_nonce,
#         req_data_bytes
#     ),
#     signature
# )
#
# gas_buffer = 20000  # Extra gas buffer
# nonce_relayer = w3.eth.get_transaction_count(relayer.address)
#
# # If you want to forward 0.01 ETH to NFTMembership, you must pass "value": req_value here
# tx = transaction.build_transaction({
#     "from": relayer.address,
#     "nonce": nonce_relayer,
#     "gas": req_gas + gas_buffer,
#     "gasPrice": w3.to_wei("5", "gwei"),   # Replaced toWei with to_wei
#     "value": req_value
# })
#
# # Sign & send
# signed_tx = w3.eth.account.sign_transaction(tx, private_key=relayer_private_key)
# tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
# receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
#
# status_str = "SUCCESS" if receipt.status == 1 else "FAILED"
# print(f"\nRelayer TX: {tx_hash.hex()}")
# print(f"Status: {status_str}")
# print(f"View on Etherscan: https://sepolia.etherscan.io/tx/{tx_hash.hex()}")

import os
import json
from brownie import accounts, Contract
from web3 import Web3

def main():
    """
    Reads signed_request.json (the user EIP-712 signature),
    calls forwarder.execute(...) on-chain, paying gas from RELAYER_PRIVATE_KEY
    """

    # 1) Load environment
    relayer_key = os.getenv("RELAYER_PRIVATE_KEY")
    if not relayer_key:
        raise ValueError("RELAYER_PRIVATE_KEY not set in environment (or code).")

    forwarder_address = os.getenv("FORWARDER_ADDRESS")
    if not forwarder_address:
        raise ValueError("FORWARDER_ADDRESS not set in environment (or code).")

    # 2) Load the signed EIP-712 request
    with open("signed_request.json","r") as f:
        payload = json.load(f)

    req_json = payload["request"]
    signature = payload["signature"]

    print(f"Loaded request with nonce={req_json['nonce']}, gas={req_json['gas']}")
    print(f"Signature: {signature}")

    # 3) Convert "data" from hex to bytes
    data_str = req_json["data"]
    if data_str.startswith("0x"):
        data_str = data_str[2:]
    data_bytes = bytes.fromhex(data_str)

    # 4) Build final request array
    forward_req = [
        req_json["from"],
        req_json["to"],
        int(req_json["value"]),
        req_json["gas"],
        req_json["nonce"],
        data_bytes
    ]

    # 5) Relayer account
    relayer_acct = accounts.add(relayer_key)

    # 6) Load forwarder from build
    with open("build/contracts/MinimalForwarder.json") as f_abi:
        forwarder_abi = json.load(f_abi)["abi"]

    forwarder = Contract.from_abi("MinimalForwarder", forwarder_address, forwarder_abi)

    # 7) Execute
    tx = forwarder.execute(
        forward_req,
        signature,
        {"from": relayer_acct}
    )
    tx.wait(1)

    print("Forwarder.execute(...) called successfully!")
    print(f"Tx hash: {tx.txid}")
    print(f"Status: {'Success' if tx.status == 1 else 'Failed'}")
